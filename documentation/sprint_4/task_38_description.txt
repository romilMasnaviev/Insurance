TODO**Контекст задачи (краткое описание) **
Задача этого шага познакомиться с протоколом HTTP.
Узнайте как можно больше информации о:
- типах запросов (GET/POST/PUT/DELETE);
- формате URL строки;
- параметрах которые можно указывать в URL строке;
- теле (body) запроса и какую информацию там можно передавать.

TODO**Что было сделано и как? (краткое описание)**
HTTP - (Hyper Text Transfer Protocol) протокол передачи гипертекста.
Он является протоколом 4-го уровня в модели TCP/IP (прикладного).
Часто API ПО использует HTTP для передачи данных в любом формате (JSON, XML и т.д).
HTTP не отправляет сразу всю информацию. Он отправляет пакеты с данными.
Чаще всего используется клиент-серверная архитектура.
1. Клиентом (user agent) чаще всего является браузер, postman, java приложение.
2. Между клиентом и сервером находится прокси (proxy)- сетевые адаптеры - они кешируют данные,
фильтруют данные, выравнивают нагрузку, аутентификация (контроль за доступом к каким-то ресурсом),
3. Сервер (web server = host) - NGINX, Apache Tomcat

У HTTP протокола есть свойства, которые делают его таким популярным:
1. Простота - для работы с ним используется обычный текст понятный человеку
2. Расширяемость - header'ы могут расширяться до бесконечности. Другие протоколы имеют ограниченный
набор таких значений.
3. Сессия вместо состояния - у запросов нет состояния. С одной стороны это проще и безопаснее,
с другой стороны если нам необходимо разграничение доступа, нам нужно как то идентифицировать
пользователя (его сессию). Это хранится в куках, поэтому мы отправляем его на сервер.

У HTTP ответа есть методы. Их количество неограниченно, однако чаще всего используются методы
GET - получить ресурс (идемпотентный)
POST - опубликовать ресурс
PATCH - изменить ресурс (не идемпотентный) - частично заменяет
PUT (идемпотентный) - полностью заменяет
DELETE - удалить ресурс (идемпотентный)
При этом методы не обязаны выполнять заявленное действие. Метод GET может удалять ресурс,
метод PATCH может вообще ничего не делать. Но это плохая практика.


Структура HTTP запроса:
1. Строка запроса (Request line) Метод запроса + URI (Uniform Resource Identifier) +  протокол и его версия
GET /index.html HTTP/1.1
2. Заголовки ответа (Request Headers) (списком)
Host: www.example.com - обязательная строка - хост куда мы обращаемся (доменное имя)
User-Agent: Mozilla/5.0 Accept: text/html, */*
Accept-Language: en-us
Accept-Charset: IS0-8859-1, utf-8
Connection: keep-alive
3. Пустая строка ( отделяет заголовки от тела запроса)
4. Тело запроса (Request Body) (опционально)

У ответа есть код состояния (Status code).
1хх - информирование
2хх - успешные
3хх - редирект
4хх - ошибки на стороне клиента
5хх - ошибки на стороне сервера

Структура HTTP ответа:
1. Строка ответа (Status line) - протокол и его версия + статус ответа (Status code)
HTTP/1.1 200OK
2. Заголовки ответа (Response Headers) (списком)
Date: Sun, 08 Feb 01:11:12 GMT
Content-Type: text/html
3. Пустая строка ( отделяет заголовки от тела ответа)
4. Тело ответа (Response Body) (опционально)

HTTP Headers можно разделить на 4 группы:
1. General - основные
2. Request - заголовки запроса
Важные:
Content-type - в каком виде информацию в ответ вы хотите получить (например, JSON)


3. Response - заголовки ответа
4. Custom - кастомные


Сам по себе HTTP не предполагает шифрование данных. Но есть расширение HTTPS, которое упаковывает
данные в криптографический протокол SSL/TLS.


TODO**Зачем это было сделано? Чему научился в процессе выполнения задания?**
Понимать что такое HTTP запрос и как он устроен. Пригодится при мокировании запросов

TODO**Сколько потратил времени на выполнение задачи?**
2 часа

TODO**Заметки, идеи, предложения в свободной форме**
Можно добавить что-то об общей структуре HTTP (Line, Headers, Body). В роликах это неявно сказано