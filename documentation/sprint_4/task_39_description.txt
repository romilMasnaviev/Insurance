TODO**Контекст задачи (краткое описание) **
Знакомимся с REST.

REST (Representational state transfer) – это стиль архитектуры программного
обеспечения для распределенных систем, таких как World Wide Web, который,
как правило, используется для построения веб-служб. Термин REST был введен
в 2000 году Роем Филдингом, одним из авторов HTTP-протокола. Системы,
поддерживающие REST, называются RESTful-системами.

Задача этого шага познакомиться с REST.
Узнайте как можно больше информации о:
- связи HTTP и REST;
- способе формировании уникальных URL;
- GET/POST/PUT/DELETE и их маппинге на CRUD операции (Create/Read/Update/Delete).

Начните изучение со следующих источников:

Введение в REST API за 7 минут
https://www.youtube.com/watch?v=cDdSzwU2Bic

Что такое Rest API
https://www.youtube.com/watch?v=RwuOzGJJcQ0

TODO**Что было сделано и как? (краткое описание)**
Описание в целом верное, но его можно уточнить и дополнить, чтобы сделать более точным и полным. Вот исправленный и дополненный текст:

Что такое REST API?

REST (Representational State Transfer) — это архитектурный стиль для взаимодействия между клиентом и сервером
в распределённых системах. REST используется для создания веб-сервисов, работающих по протоколу HTTP.

Разница между протоколом и архитектурным стилем
	•	Протокол — это набор строгих правил, определяющих, как данные должны передаваться. Пример: HTTP, FTP.
	•	Архитектура — это набор ограничений и рекомендаций, предоставляющих свободу реализации. REST накладывает такие ограничения,
	но не регламентирует, как их реализовывать.

Принципы REST
	1.	Клиент-серверная модель
Клиент и сервер независимы. Сервер предоставляет API для доступа к ресурсам, а клиент использует его. Серверу не важно,
кто клиент, а клиенту — как устроен сервер.
	2.	Единый интерфейс (Uniform Interface)
Все взаимодействия между клиентом и сервером происходят через единый интерфейс. Это упрощает понимание и использование API.
	3.	Отсутствие состояния на сервере (Statelessness)
Каждый запрос от клиента к серверу должен быть самодостаточным. Сервер не хранит данных о предыдущих запросах.
Если требуется информация о состоянии, клиент передаёт её с каждым запросом.
	4.	Кэширование (Cacheability)
Сервер может указывать клиенту, какие данные можно кэшировать, а какие — нет, чтобы снизить нагрузку
и повысить производительность.
	5.	Доступ к ресурсам (Resource-based)
В основе REST лежит доступ к ресурсам. Ресурсом может быть любой объект: пользователь, документ, файл и т. д.
	6.	Идентификатор ресурса
У каждого ресурса должен быть уникальный идентификатор, чаще всего это URI (Uniform Resource Identifier).
Пример:
	•	URI = http://example.com/users/123 — полный идентификатор.
	•	URL = http://example.com — адрес ресурса в сети.
	•	URN = /users/123 — уникальное имя ресурса.
	7.	Представление ресурса (Representation)
Ресурс передаётся клиенту в одном из представлений (JSON, XML, HTML и т. д.), которое описывает его состояние.
	8.	Гипермедиа как механизм управления состоянием (HATEOAS)
Ответы API могут включать гиперссылки, помогающие клиенту навигироваться по возможным действиям. Например,
ссылка на изменение или удаление ресурса.
	9.	Многоуровневая система (Layered System)
Архитектура может включать промежуточные уровни (кэширование, балансировщики нагрузки, прокси-серверы).
Каждый уровень общается только с соседними.

Уровни зрелости REST API (Модель Ричардсона)
	1.	Уровень 0
Один URI для всех операций, все запросы выполняются через POST. Такой API не является RESTful.
	2.	Уровень 1
Используются отдельные URI для каждого ресурса.
	3.	Уровень 2
Добавляется поддержка различных HTTP-методов (GET, POST, PUT, DELETE), соответствующих действиям с ресурсами.
	4.	Уровень 3
Ответы API включают гиперссылки для навигации (HATEOAS), делая взаимодействие более гибким и самоописательным.

Документация REST API

Для документирования REST API часто используется Swagger (OpenAPI). С его помощью можно:
	•	Автоматически генерировать документацию.
	•	Экспортировать спецификацию в инструменты вроде Postman.
	•	Облегчить разработку и тестирование.

Этот текст должен быть более понятным и лаконичным для начинающих, а также полезным для тех, кто хочет углубиться в принципы REST.
TODO**Зачем это было сделано? Чему научился в процессе выполнения задания?**
Для того, чтобы понимать принципы REST и применять их при проектировании архитектуры проекта

TODO**Сколько потратил времени на выполнение задачи?**
1 час

TODO**Заметки, идеи, предложения в свободной форме**